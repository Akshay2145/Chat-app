{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","ValidateEmail","test","alert","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","firstUser","secondUser","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","display","base","icon","View","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","description","handleRename","put","chatId","chatName","response","message","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","timeNow","Date","te","createdAt","getTime","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","lastTypingTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.528aca18.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        // description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  function ValidateEmail(email) \r\n  {\r\n   if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email))\r\n    {\r\n      return (true)\r\n    }\r\n      alert(\"You have entered an invalid email address!\")\r\n      return (false)\r\n  }\r\n\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n\r\n      return;\r\n    }\r\n    if(!ValidateEmail(email)){\r\n      toast({\r\n        title: \"Please Enter a Valid Email\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        // description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          CHAT APP\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\n// import animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  // const defaultOptions = {\r\n  //   loop: true,\r\n  //   autoplay: true,\r\n  //   animationData: animationData,\r\n  //   rendererSettings: {\r\n  //     preserveAspectRatio: \"xMidYMid slice\",\r\n  //   },\r\n  // };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      // console.log(\"HELLO\")\r\n      // console.log(data);\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        // var timeNow = new Date().getTime();\r\n        // console.log(\"at sending\", timeNow);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n        \r\n        // prompt(\"delay is: \" ,timeNow - te.getTime());\r\n\r\n      }\r\n\r\n      var timeNow = new Date();\r\n      var te = new Date(newMessageRecieved.createdAt);\r\n      // console.log(newMessageRecieved.createdAt)\r\n      console.log(\"delay is: \", timeNow - te.getTime());\r\n      // console.log(timeNow.getTime());\r\n\r\n\r\n\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  Typing....\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return (i > 0 && messages[i - 1].sender._id === m.sender._id);\r\n};\r\n\r\n// export const getSender = (loggedUser, users) => {\r\n//   return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n// };\r\nexport const getSender = (loggedUser, users) => {\r\n  if (!loggedUser || !users || users.length < 2) {\r\n    // Handle the case where loggedUser, users, or users array is undefined or insufficient.\r\n    // You might return a default value or throw an error as needed.\r\n    return \"Sender Not Found\";\r\n  }\r\n\r\n  const [firstUser, secondUser] = users;\r\n\r\n  if (!firstUser || !secondUser) {\r\n    // Handle the case where firstUser or secondUser is undefined.\r\n    // You might return a default value or throw an error as needed.\r\n    return \"Sender Not Found\";\r\n  }\r\n\r\n  return firstUser._id === loggedUser._id ? secondUser.name : firstUser.name;\r\n};\r\n\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return (users[0]._id === loggedUser._id ? users[1] : users[0]);\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n  console.log(history)\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n// import { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ user,handleFunction }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      display=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    // if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n    //   toast({\r\n    //     title: \"Only admins can remove someone!\",\r\n    //     status: \"error\",\r\n    //     duration: 5000,\r\n    //     isClosable: true,\r\n    //     position: \"bottom\",\r\n    //   });\r\n    //   return;\r\n    // }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton display={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl display=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody display=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: rohan , rohit\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" display=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        display=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            display=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        display=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat? getSender(loggedUser, chat.users): chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        display=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text display={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          CHAT APP\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box display=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" display=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box display=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}